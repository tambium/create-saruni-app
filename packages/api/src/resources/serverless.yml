service: resources

provider:
  name: aws
  region: ${file(./../../../../saruni.json):serverless.${self:custom.stage}.region}
  stage: dev
  runtime: nodejs12.x

custom:
  ProjectName: ${file(./../../../../saruni.json):projectName}
  DBInstanceSize:
    dev: db.t2.micro
    prod: ${file(./../../../../saruni.json):serverless.${self:custom.stage}.dbInstance}
  stage: ${opt:stage, self:provider.stage}
  IsProd: !Equals ["${self:custom.stage}", prod]
  BastionKeyName: ${self:custom.stage}-${file(./../../../../saruni.json):serverless.${self:custom.stage}.bastionKeyName}
  DBName: ${ssm:/${self:custom.ProjectName}/DBName/${self:custom.stage}~true}
  DBInstance: ${self:custom.DBInstanceSize.${self:custom.stage}}
  DBUsername: ${ssm:/${self:custom.ProjectName}/DBUsername/${self:custom.stage}~true}
  DBPassword: ${ssm:/${self:custom.ProjectName}/DBPassword/${self:custom.stage}~true}
  DBHost:
    Fn::GetAtt: [PostgreSQLRDSInstance, Endpoint.Address]
  DBPort:
    Fn::GetAtt: [PostgreSQLRDSInstance, Endpoint.Port]
  DBUrl:
    {
      "Fn::Join":
        [
          "",
          [
            "postgres://",
            "${self:custom.DBUsername}",
            ":",
            "${self:custom.DBPassword}",
            "@",
            "${self:custom.DBHost}",
            ":",
            "${self:custom.DBPort}",
            "/",
            "${self:custom.DBName}",
            "?schema=public",
          ],
        ],
    }

resources:
  Conditions:
    IsProd: !Equals ["${self:custom.stage}", prod]
  Resources:
    # For now let both environments use Nat instances
    # NatEIP: ${file(./NatEIP.yml)}
    # NatGateway: ${file(./NatGateway.yml)}
    # NatGatewayRoute: ${file(./NatGatewayRoute.yml)}
    NatRoute: ${file(./NatRoute.yml)}
    NatInstance: ${file(./NatInstance.yml)}
    NatInstanceSG: ${file(./NatInstanceSG.yml)}
    FrontendCloudfront: ${file(./FrontendCloudfront.yml)}
    FrontendRoutes: ${file(./FrontendRoutes.yml)}
    FrontendBucket: ${file(./FrontendBucket.yml)}
    FrontendBucketPolicy: ${file(./FrontendBucketPolicy.yml)}
    VPC: ${file(./vpc.yml)}
    VPCGatewayAttachment: ${file(./VPCGatewayAttachment.yml)}
    PrivateSubnetA: ${file(./PrivateSubnetA.yml)}
    PrivateSubnetB: ${file(./PrivateSubnetB.yml)}
    PrivateSubnetC: ${file(./PrivateSubnetC.yml)}
    PrivateRouteTable: ${file(./PrivateRouteTable.yml)}
    PrivateSubnetRouteTableAssociationA: ${file(./PrivateSRTA.yml)}
    PrivateSubnetRouteTableAssociationB: ${file(./PrivateSRTB.yml)}
    PrivateSubnetRouteTableAssociationC: ${file(./PrivateSRTC.yml)}
    RDSSubnetGroup: ${file(./RDSSubnetGroup.yml)}
    InternetGateway: ${file(./InternetGateway.yml)}
    PostgreSQLRDSInstance: ${file(./PostgreSQLRDSInstance.yml)}
    BastionRouteTable: ${file(./BastionRouteTable.yml)}
    BastionRoute: ${file(./BastionRoute.yml)}
    PublicSubnet: ${file(./PublicSubnet.yml)}
    PublicSubnetAssociation: ${file(./PublicSubnetAssociation.yml)}
    BastionInstance: ${file(./BastionInstance.yml)}
    BastionSSH: ${file(./BastionSSH.yml)}
    DBSSH: ${file(./DBSSH.yml)}
    BastionConnection: ${file(./BastionConnection.yml)}
    LambdaSecurityGroup: ${file(./LambdaSecurityGroup.yml)}
    SecurityGroup: ${file(./SecurityGroup.yml)}
  Outputs:
    PrivateSubnetA:
      Value:
        Ref: PrivateSubnetA
      Export:
        Name: ${self:custom.stage}-PrivateSubnetA
    PrivateSubnetB:
      Value:
        Ref: PrivateSubnetB
      Export:
        Name: ${self:custom.stage}-PrivateSubnetB
    PrivateSubnetC:
      Value:
        Ref: PrivateSubnetC
      Export:
        Name: ${self:custom.stage}-PrivateSubnetC
    LambdaSecurityGroup:
      Value:
        Fn::GetAtt:
          - LambdaSecurityGroup
          - GroupId
      Export:
        Name: ${self:custom.stage}-LambdaSecurityGroup
    DBName:
      Value: ${self:custom.DBName}
      Export:
        Name: ${self:custom.stage}-DBName
    DBUsername:
      Value: ${self:custom.DBUsername}
      Export:
        Name: ${self:custom.stage}-DBUsername
    DBPassword:
      Value: ${self:custom.DBPassword}
      Export:
        Name: ${self:custom.stage}-DBPassword
    DBHost:
      Value: ${self:custom.DBHost}
      Export:
        Name: ${self:custom.stage}-DBHost
    DBPort:
      Value: ${self:custom.DBPort}
      Export:
        Name: ${self:custom.stage}-DBPort
    AccessTokenSecret:
      Value: ${ssm:/${self:custom.ProjectName}/AccessTokenSecret/${self:custom.stage}~true}
      Export:
        Name: ${self:custom.stage}-AccessTokenSecret
    RefreshTokenSecret:
      Value: ${ssm:/${self:custom.ProjectName}/RefreshTokenSecret/${self:custom.stage}~true}
      Export:
        Name: ${self:custom.stage}-RefreshTokenSecret
    DBUrl:
      Value: ${self:custom.DBUrl}
      Export:
        Name: ${self:custom.stage}-DBUrl
    WebDistributionUrl:
      Value: !Join ["", ["http://", !GetAtt FrontendCloudfront.DomainName]]
      Export:
        Name: ${self:custom.stage}-WebDistributionUrl
