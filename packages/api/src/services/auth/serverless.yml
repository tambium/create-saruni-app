service: auth

provider:
  name: aws
  region: ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.region}
  stage: dev
  runtime: nodejs12.x
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ExtAPIGatewayRESTAPIId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ExtAPIGatewayRESTAPIRootResourceId

custom:
  RestAPIId:
    "Fn::ImportValue": ${self:custom.stage}-ExtAPIGatewayRESTAPIId
  domain:
    dev:
      {
        "Fn::Join":
          [
            "",
            [
              "${self:custom.RestAPIId}",
              ".execute-api.",
              "${self:provider.region}",
              ".amazonaws.com",
            ],
          ],
      }
    prod: ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.domainName}
  stage: ${opt:stage, self:provider.stage}
  webpack:
    keepOutputDirectory: true
    webpackConfig: "../../../webpack.config.js"
    includeModules:
      packagePath: "../../../package.json"
      forceExclude:
        - "aws-sdk"
    packager: "yarn"

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack

package:
  individually: true

resources:
  Conditions:
    IsProd: !Equals ["${self:custom.stage}", prod]
  Resources:
    AuthLambdaRole: ${file(./resources/AuthLambdaRole.yml)}

functions:
  cookieManager:
    role: AuthLambdaRole
    environment:
      DOMAIN: ${self:custom.domain.${self:custom.stage}}
      STAGE: ${self:custom.stage}
      ACCESS_TOKEN_SECRET:
        "Fn::ImportValue": ${self:custom.stage}-AccessTokenSecret
      REFRESH_TOKEN_SECRET:
        "Fn::ImportValue": ${self:custom.stage}-RefreshTokenSecret
    handler: cookieManager.handler
    events:
      - http:
          path: /cookieManager
          method: put
          cors:
            origins:
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendUrl}
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendCloudfrontUrl}
              - ${file(./../../../../../saruni.json):devServerEndpoint.web}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /cookieManager
          method: delete
          cors:
            origins:
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendUrl}
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendCloudfrontUrl}
              - ${file(./../../../../../saruni.json):devServerEndpoint.web}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  refreshToken:
    role: AuthLambdaRole
    environment:
      DOMAIN: ${self:custom.domain.${self:custom.stage}}
      STAGE: ${self:custom.stage}
      ACCESS_TOKEN_SECRET:
        "Fn::ImportValue": ${self:custom.stage}-AccessTokenSecret
      REFRESH_TOKEN_SECRET:
        "Fn::ImportValue": ${self:custom.stage}-RefreshTokenSecret
    handler: refreshToken.handler
    events:
      - http:
          path: /refreshToken
          method: post
          cors:
            origins:
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendUrl}
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendCloudfrontUrl}
              - ${file(./../../../../../saruni.json):devServerEndpoint.web}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
