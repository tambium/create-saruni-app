service: graphql

provider:
  name: aws
  region: ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.region}
  stage: dev
  runtime: nodejs12.x

custom:
  createCustomDomain:
    dev: false
    prod: true
  customDomain:
    domainName: ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.domainName}
    certificateArn: ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.certificateArn}
    stage: ${self:custom.stage}
    createRoute53Record: true
    enabled: ${self:custom.createCustomDomain.${self:custom.stage}}
    endpointType: "edge"
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: false
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: "../../../webpack.config.js"
    includeModules:
      packagePath: "../../../package.json"
      forceInclude:
        - "@prisma/client"
      forceExclude:
        - "@prisma/cli"
        - "aws-sdk"
    packager: "yarn"
    scripts:
      - prisma generate

plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-webpack

package:
  individually: true

resources:
  Resources:
    GraphQLLambdaRole: ${file(./resources/GraphQLLambdaRole.yml)}
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ExtAPIGatewayRESTAPIId
    apiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.stage}-ExtAPIGatewayRESTAPIRootResourceId

functions:
  graphql:
    role: GraphQLLambdaRole
    environment:
      STAGE: ${self:custom.stage}
      ACCESS_TOKEN_SECRET:
        "Fn::ImportValue": ${self:custom.stage}-AccessTokenSecret
      DATABASE_URL:
        "Fn::ImportValue": ${self:custom.stage}-DBUrl
    vpc:
      securityGroupIds:
        - "Fn::ImportValue": ${self:custom.stage}-LambdaSecurityGroup
      subnetIds:
        - "Fn::ImportValue": ${self:custom.stage}-PrivateSubnetA
        - "Fn::ImportValue": ${self:custom.stage}-PrivateSubnetB
        - "Fn::ImportValue": ${self:custom.stage}-PrivateSubnetC
    handler: graphql.handler
    events:
      - http:
          path: /graphql
          method: post
          cors:
            origins:
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendUrl}
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendCloudfrontUrl}
              - http://localhost:${file(./../../../../../saruni.json):devServerPort.web}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /graphql
          method: get
          cors:
            origins:
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendUrl}
              - ${file(./../../../../../saruni.json):serverless.${self:custom.stage}.frontendCloudfrontUrl}
              - http://localhost:${file(./../../../../../saruni.json):devServerPort.web}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
